Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "Select the VPC where the instances will be launched"
  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: "Select the security group for the instances"
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Select the key pair for the instances"
  DomainControllerName:
    Type: String
    Description: "Enter the name for the Domain Controller instance"
    AllowedPattern: "^[a-zA-Z0-9]*$"
  CollectorServerName:
    Type: String
    Description: "Enter the name for the Collector server instance"
    AllowedPattern: "^[a-zA-Z0-9]*$"
  DomainName:
    Type: String
    Description: The name of your Active Directory domain
    AllowedPattern: ^[a-zA-Z0-9\-\.]*$
  DomainNetbiosName:
    Description: The NetBIOS name of the domain to create
    Type: String
    MinLength: '1'
    MaxLength: '15'
    AllowedPattern: '[a-zA-Z0-9_-]+'
    ConstraintDescription: 'Must contain only alphanumeric characters, hyphens, and underscores, and must be between 1 and 15 characters in length'
  SafeModeAdministratorPassword:
    Description: Password for the DSRM Administrator account used to perform restore operations
    Type: String
    NoEcho: True
    MinLength: '8'
    MaxLength: '64'
    ConstraintDescription: The password must be between 8 and 64 characters in length.
  DomainAdmin1:
    Type: String
    Description: Enter your personal domain administrator username (e.g firstname.lastname)
    AllowedPattern: ^[a-zA-Z0-9_.]+$
    ConstraintDescription: Only alphanumeric characters, underscores, and periods are allowed
  DomainAdmin1Password:
    Type: String
    Description: "Enter your personal domain administrator password"
    NoEcho: true
  DomainAdmin2:
    Type: String
    Description: Enter the username for the collector services local administrator (e.g svc_lacoll)
    AllowedPattern: ^[a-zA-Z0-9_.]+$
    ConstraintDescription: Only alphanumeric characters, underscores, and periods are allowed
  DomainAdmin2Password:
    Type: String
    Description: "Enter the password for the collector services local administrator (e.g svc_lacoll)"
    NoEcho: true
  DomainAdmin3:
    Type: String
    Description: Enter the username for the collector services domain administrator (e.g svc_dacoll)
    AllowedPattern: ^[a-zA-Z0-9_.]+$
    ConstraintDescription: Only alphanumeric characters, underscores, and periods are allowed
  DomainAdmin3Password:
    Type: String
    Description: "Enter the password for collector services domain administrator (e.g svc_dacoll)"
    NoEcho: true
  MSSQLInstanceName:
    Type: String
    Description: "Enter the name for the MSSQL server instance"
    AllowedPattern: "^[a-zA-Z0-9]*$"
  MSSQLPassword:
    Type: String
    Description: "Enter the password for the sa user in SQL Server"
    NoEcho: true
  ClusteredRoleName:
    Type: String
    Description: "Enter the name for the Windows Server Failover Cluster (e.g cluster01)"
    AllowedPattern: "^[a-zA-Z0-9]*$"

Resources:
  DomainControllerInstance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      CreditSpecification:
        CPUCredits: standard
      InstanceType: t3.small
      ImageId: ami-0dc21fb273a648e34
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroupId
      UserData:
        Fn::Base64: 
          !Sub |
          <powershell>
          # Install Active Directory Domain Services
          Install-WindowsFeature AD-Domain-Services -IncludeManagementTools

          # Configure static IP address
          $IP = (Get-NetAdapter | Where-Object {$_.Name -eq 'Ethernet'}).IPv4Address.IPAddress
          New-NetIPAddress -IPAddress $IP -InterfaceAlias 'Ethernet' -PrefixLength 24 -DefaultGateway '10.0.0.1'

          # Create new domain
            Install-ADDSForest `
            -DomainName ${DomainName} `
            -CreateDnsDelegation:$false `
            -DatabasePath "%SYSTEMROOT%\NTDS" `
            -DomainMode "WinThreshold" `
            -DomainNetbiosName ${DomainNetbiosName} `
            -ForestMode "WinThreshold" `
            -InstallDns:$true `
            -LogPath "C:\Windows\NTDS" `
            -SysvolPath "%SYSTEMROOT%\SYSVOL" `
            -Force:$true

          # Create domain administrator users
          $secpasswd1 = ConvertTo-SecureString ${DomainAdmin1Password} -AsPlainText -Force
          $secpasswd2 = ConvertTo-SecureString ${DomainAdmin2Password} -AsPlainText -Force
          $secpasswd3 = ConvertTo-SecureString ${DomainAdmin3Password} -AsPlainText -Force
          $domainCreds = New-Object System.Management.Automation.PSCredential ("${DomainName}\Administrator", (ConvertTo-SecureString -String "${DomainAdmin1Password}" -Force -AsPlainText))
          New-ADUser -Name ${DomainAdmin1} -AccountPassword $secpasswd1 -Enabled $true -PasswordNeverExpires $true -CannotChangePassword $false -Path "CN=Users,DC=${DomainName}" -Credential $domainCreds -DisplayName ${DomainAdmin1}
          New-ADUser -Name ${DomainAdmin2} -AccountPassword $secpasswd2 -Enabled $true -PasswordNeverExpires $true -CannotChangePassword $false -Path "CN=Users,DC=${DomainName}" -Credential $domainCreds -DisplayName ${DomainAdmin2}
          New-ADUser -Name ${DomainAdmin3} -AccountPassword $secpasswd3 -Enabled $true -PasswordNeverExpires $true -CannotChangePassword $false -Path "CN=Users,DC=${DomainName}" -Credential $domainCreds -DisplayName ${DomainAdmin3}

          # Create DNS forwarders
          Set-DnsServerForwarder -IPAddress 8.8.8.8, 8.8.4.4

          # Restart computer
          Restart-Computer -Force
          </powershell>
      Tags:
      - Key: Name
        Value: !Sub "${DomainControllerName}.${DomainName}"

  CollectorInstance:
    Type: AWS::EC2::Instance
    DependsOn: DomainControllerInstance
    Properties:
      DisableApiTermination: false
      CreditSpecification:
        CPUCredits: standard
      InstanceType: t3.small
      ImageId: ami-0dc21fb273a648e34
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroupId
      UserData:
        Fn::Base64: 
          !Sub |
          <powershell>
          # Configure static IP address
          $IP = (Get-NetAdapter | Where-Object {$_.Name -eq 'Ethernet'}).IPv4Address.IPAddress
          New-NetIPAddress -IPAddress $IP -InterfaceAlias 'Ethernet' -PrefixLength 24 -DefaultGateway '10.0.0.1'

          # Join domain
          $domainAdminCreds = New-Object System.Management.Automation.PSCredential ("${DomainAdmin1}@${DomainName}", (ConvertTo-SecureString -String "${DomainAdmin1Password}" -Force -AsPlainText))
          Add-Computer -DomainName ${DomainName} -Credential $domainAdminCreds

          # Configure firewall rules for cluster communication
          New-NetFirewallRule -DisplayName "Cluster" -Direction Inbound -Protocol TCP -LocalPort "3343-3350" -Action Allow
          New-NetFirewallRule -DisplayName "Cluster" -Direction Inbound -Protocol UDP -LocalPort "3343-3350" -Action Allow

          # Restart computer
          Restart-Computer -Force
          </powershell>
      Tags:
      - Key: Name
        Value: !Sub "${CollectorServerName}.${DomainName}"

  MSSQLInstance:
    Type: AWS::EC2::Instance
    DependsOn: CollectorInstance
    Properties:
      DisableApiTermination: false
      CreditSpecification:
        CPUCredits: standard
      InstanceType: t3.small
      ImageId: ami-0dc21fb273a648e34
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroupId
      UserData:
        Fn::Base64: 
          !Sub |
          <powershell>
          # Configure static IP address
          $IP = (Get-NetAdapter | Where-Object {$_.Name -eq 'Ethernet'}).IPv4Address.IPAddress
          New-NetIPAddress -IPAddress $IP -InterfaceAlias 'Ethernet' -PrefixLength 24 -DefaultGateway '10.0.0.1'

          # Join domain
          $domainCreds = New-Object System.Management.Automation.PSCredential ("${DomainName}\${DomainAdmin1}", (ConvertTo-SecureString -String "${DomainAdmin1Password}" -Force -AsPlainText))
          Add-Computer -DomainName ${DomainName} -Credential $domainCreds

          # Install SQL Server 2022 Express
          $url = 'https://download.microsoft.com/download/5/1/4/5145fe04-4d30-4b85-b0d1-39533663a2f1/SQL2022-SSEI-Expr.exe'
          $installPath = Join-Path $env:SystemDrive 'SQLServer'
          New-Item -ItemType Directory -Path $installPath -Force | Out-Null
          $path = Join-Path $installPath 'SQLServer2022-SSEI-Expr.exe'
          Invoke-WebRequest -Uri $url -OutFile $path
          $installArgs = @('/Action=Install', '/Features=SQLENGINE', '/InstanceName=MSSQLSERVER', '/SqlSysAdminAccounts=BUILTIN\Administrators', '/SecurityMode=SQL', '/SAPWD=' + ${MSSQLPassword}, '/IAcceptSqlServerLicenseTerms', '/quiet', '/norestart')
          Start-Process -FilePath $path -ArgumentList $installArgs -Wait -NoNewWindow

          # Configure firewall
          New-NetFirewallRule -DisplayName "SQL Server" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 1433

          # Install SQL Server Management Studio (SSMS)
          $url = 'https://aka.ms/ssmsfullsetup'
          $installPath = Join-Path $env:SystemDrive 'SSMS'
          New-Item -ItemType Directory -Path $installPath -Force | Out-Null
          $path = Join-Path $installPath 'SSMS-Setup-ENU.exe'
          Invoke-WebRequest -Uri $url -OutFile $path
          $installArgs = @('/install', '/quiet', '/norestart')
          Start-Process -FilePath $path -ArgumentList $installArgs -Wait -NoNewWindow

          # Install Failover Clustering feature
          Install-WindowsFeature Failover-Clustering -IncludeManagementTools

          # Configure firewall rules for cluster communication
          New-NetFirewallRule -DisplayName "Cluster" -Direction Inbound -Protocol TCP -LocalPort "3343-3350" -Action Allow
          New-NetFirewallRule -DisplayName "Cluster" -Direction Inbound -Protocol UDP -LocalPort "3343-3350" -Action Allow

          # Define WSFC cluster IP address and witness file share
          $WSFCIPAddress = "10.0.0.100"
          $WSFCWitnessInstance = "file-server"

          # Create clustered role
          New-Cluster -Name ${ClusteredRoleName} -Node ${DomainControllerName},${MSSQLInstanceName} -StaticAddress $WSFCIPAddress -NoStorage

          # Create a disk witness
          New-SmbShare -Name "MSSQLServerWFCWitness" -Path "$($Env:SystemDrive)\MSSQLServerWFCWitness" -FullAccess "Everyone"
          $diskWitness = "${DomainControllerName}.${DomainName}"
          $diskWitnessPath = "\\$($diskWitness)\MSSQLServerWFCWitness"
          Set-ClusterQuorum -FileShareWitness $diskWitnessPath -Cluster $ClusteredRoleName

          # Create clustered instance
          Add-ClusteredSqlServerInstance -InstanceName ${MSSQLInstanceName} -ClusterName ${ClusteredRoleName} -SqlAdministratorCredentials $domainCreds -NetworkName ${MSSQLInstanceName} -NoStorage -SkipUpdateAlternateNodes -Verbose

          # Restart computer
          Restart-Computer -Force
          </powershell>
      Tags:
      - Key: Name
        Value: !Sub "${MSSQLInstanceName}.${DomainName}"

Outputs:
  DomainControllerPublicIP:
    Value: !GetAtt DomainControllerInstance.PublicIp
  DomainControllerPrivateIP:
    Value: !GetAtt DomainControllerInstance.PrivateIp
  DomainControllerInstanceId:
    Value: !Ref DomainControllerInstance

  CollectorPublicIP:
    Value: !GetAtt CollectorInstance.PublicIp
    Description: The public IP address of the collector instance
  CollectorPrivateIP:
    Value: !GetAtt CollectorInstance.PrivateIp
    Description: The private IP address of the collector instance
  CollectorInstanceId:
    Value: !Ref CollectorInstance

  MSSQLPublicIP:
    Value: !GetAtt MSSQLInstance.PublicIp
    Description: The public IP address of the SQL Server instance
  MSSQLPrivateIP:
    Value: !GetAtt MSSQLInstance.PrivateIp
    Description: The private IP address of the SQL Server instance
  MSSQLInstanceId:
    Value: !Ref MSSQLInstance